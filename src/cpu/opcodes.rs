use std::collections::HashMap;

pub struct Opcode {
    pub code: u8,
    pub cmd: String,
    pub length: usize, // in bytes
                       // TODO: add executable code or other option (match statement)
}

pub struct OpcodeIndex {
    pub entry: HashMap<u8, Opcode>,
}

#[allow(non_camel_case_types)]
#[derive(Debug, PartialEq)]
pub enum Instruction {
    NYI(u8),
    ILLEGAL_EC(u8),
    LD_A_n8(u8, u8),
    LD_D_L(u8),
    ADC_A_L(u8),
    OR_A_HL(u8),
    RET_Z(u8),
    DEC_E(u8),
    LD_E_C(u8),
    XOR_A_H(u8),
    LDH_a8_A(u8, u8),
    LD_SP_HL(u8),
    JP_a16(u8, u8),
    INC_C(u8),
    LD_L_L(u8),
    DEC_H(u8),
    LD_H_A(u8),
    PREFIX(u8),
    ADD_HL_SP(u8),
    RET_NC(u8),
    LD_H_D(u8),
    INC_A(u8),
    LD_HL_B(u8),
    INC_BC(u8),
    LD_HL_E(u8),
    RST_00(u8),
    LD_D_C(u8),
    SUB_A_D(u8),
    JP_Z_a16(u8, u8),
    LDH_A_a8(u8, u8),
    SUB_A_L(u8),
    LD_a16_SP(u8, u8),
    LD_D_D(u8),
    LD_C_E(u8),
    XOR_A_B(u8),
    LD_D_E(u8),
    ADC_A_B(u8),
    JR_Z_e8(u8, u8),
    ILLEGAL_DB(u8),
    JR_NC_e8(u8, u8),
    LD_HL_n16(u8, u8),
    INC_D(u8),
    OR_A_D(u8),
    LD_A_L(u8),
    LD_B_C(u8),
    LD_A_HL(u8),
    ADC_A_C(u8),
    ILLEGAL_FC(u8),
    LD_L_A(u8),
    LD_L_H(u8),
    LD_C_n8(u8, u8),
    LD_HL_A(u8),
    DEC_A(u8),
    RST_18(u8),
    JP_NZ_a16(u8, u8),
    SCF(u8),
    RST_10(u8),
    ADC_A_D(u8),
    LD_HL_n8(u8, u8),
    DEC_C(u8),
    JP_HL(u8),
    RETI(u8),
    ILLEGAL_EB(u8),
    ADD_A_HL(u8),
    ILLEGAL_F4(u8),
    LD_C_C(u8),
    ILLEGAL_E3(u8),
    ILLEGAL_DD(u8),
    LD_H_B(u8),
    LD_A_E(u8),
    SBC_A_B(u8),
    SBC_A_D(u8),
    LD_DE_A(u8),
    SUB_A_C(u8),
    LD_DE_n16(u8, u8),
    AND_A_L(u8),
    LD_HL_SP_e8(u8, u8),
    DEC_D(u8),
    XOR_A_A(u8),
    CP_A_B(u8),
    LD_C_A(u8),
    ADD_HL_HL(u8),
    LD_B_A(u8),
    RST_38(u8),
    INC_L(u8),
    SBC_A_E(u8),
    DEC_HL(u8),
    ADC_A_n8(u8, u8),
    SUB_A_HL(u8),
    RET(u8),
    LD_B_HL(u8),
    CALL_NZ_a16(u8, u8),
    SUB_A_n8(u8, u8),
    AND_A_HL(u8),
    CALL_C_a16(u8, u8),
    LD_a16_A(u8, u8),
    JR_e8(u8, u8),
    SUB_A_A(u8),
    AND_A_E(u8),
    ADD_A_C(u8),
    LD_C_HL(u8),
    LD_A_DE(u8),
    LD_E_B(u8),
    LD_L_E(u8),
    LD_HL_D(u8),
    DAA(u8),
    LD_A_C(u8),
    CP_A_A(u8),
    HALT(u8),
    ADD_A_E(u8),
    AND_A_B(u8),
    POP_DE(u8),
    POP_AF(u8),
    DEC_SP(u8),
    LD_C_H(u8),
    SUB_A_E(u8),
    LD_H_n8(u8, u8),
    EI(u8),
    CP_A_H(u8),
    OR_A_H(u8),
    CP_A_L(u8),
    RLCA(u8),
    NOP(u8),
    RRCA(u8),
    RST_20(u8),
    DEC_L(u8),
    LD_HL_C(u8),
    ADD_SP_e8(u8, u8),
    SBC_A_C(u8),
    ADC_A_H(u8),
    RRA(u8),
    RET_C(u8),
    ILLEGAL_ED(u8),
    LD_D_n8(u8, u8),
    STOP_n8(u8, u8),
    LD_E_H(u8),
    INC_SP(u8),
    LD_E_A(u8),
    LD_H_H(u8),
    AND_A_D(u8),
    CP_A_C(u8),
    CP_A_D(u8),
    INC_HL(u8),
    LD_H_E(u8),
    CP_A_HL(u8),
    ILLEGAL_FD(u8),
    ADC_A_HL(u8),
    INC_B(u8),
    XOR_A_L(u8),
    RST_28(u8),
    OR_A_A(u8),
    LD_SP_n16(u8, u8),
    OR_A_B(u8),
    ADD_A_H(u8),
    OR_A_E(u8),
    LD_D_B(u8),
    LD_A_D(u8),
    INC_E(u8),
    PUSH_HL(u8),
    LD_D_A(u8),
    LD_H_HL(u8),
    DEC_DE(u8),
    XOR_A_D(u8),
    ADD_A_L(u8),
    SBC_A_HL(u8),
    SUB_A_H(u8),
    INC_DE(u8),
    ADD_A_B(u8),
    LD_L_B(u8),
    LD_H_C(u8),
    AND_A_C(u8),
    LD_E_HL(u8),
    LD_B_H(u8),
    LD_B_B(u8),
    CALL_a16(u8, u8),
    RST_30(u8),
    LD_H_L(u8),
    LD_BC_A(u8),
    JP_NC_a16(u8, u8),
    LD_D_H(u8),
    JP_C_a16(u8, u8),
    SBC_A_H(u8),
    AND_A_H(u8),
    PUSH_BC(u8),
    ADD_A_D(u8),
    DI(u8),
    RST_08(u8),
    LD_C_D(u8),
    SBC_A_n8(u8, u8),
    LD_B_n8(u8, u8),
    AND_A_A(u8),
    ADC_A_E(u8),
    CALL_NC_a16(u8, u8),
    JR_NZ_e8(u8, u8),
    DEC_BC(u8),
    SBC_A_L(u8),
    ADD_A_n8(u8, u8),
    LD_B_D(u8),
    PUSH_DE(u8),
    XOR_A_n8(u8, u8),
    LD_B_L(u8),
    LD_A_H(u8),
    CPL(u8),
    LD_E_n8(u8, u8),
    INC_H(u8),
    AND_A_n8(u8, u8),
    LD_D_HL(u8),
    ADC_A_A(u8),
    CP_A_n8(u8, u8),
    PUSH_AF(u8),
    LD_A_BC(u8),
    LD_A_A(u8),
    LD_HL_H(u8),
    LD_C_L(u8),
    OR_A_C(u8),
    POP_HL(u8),
    ILLEGAL_E4(u8),
    LD_L_HL(u8),
    OR_A_L(u8),
    LD_E_L(u8),
    LD_E_E(u8),
    LD_A_a16(u8, u8),
    LD_E_D(u8),
    XOR_A_HL(u8),
    ADD_HL_BC(u8),
    ADD_HL_DE(u8),
    SUB_A_B(u8),
    RET_NZ(u8),
    OR_A_n8(u8, u8),
    POP_BC(u8),
    XOR_A_C(u8),
    LD_L_n8(u8, u8),
    CALL_Z_a16(u8, u8),
    XOR_A_E(u8),
    LD_L_C(u8),
    RLA(u8),
    SBC_A_A(u8),
    CCF(u8),
    LD_L_D(u8),
    LD_C_B(u8),
    ILLEGAL_D3(u8),
    LD_BC_n16(u8, u8),
    ADD_A_A(u8),
    LD_HL_L(u8),
    LD_B_E(u8),
    JR_C_e8(u8, u8),
    DEC_B(u8),
    CP_A_E(u8),
    LD_A_B(u8),
}

impl From<u8> for Instruction {
    fn from(value: u8) -> Self {
        match value {
            0xEC => Self::ILLEGAL_EC(4),
            0x3E => Self::LD_A_n8(8, 1),
            0x55 => Self::LD_D_L(4),
            0x8D => Self::ADC_A_L(4),
            0xB6 => Self::OR_A_HL(8),
            0xC8 => Self::RET_Z(20),
            0x1D => Self::DEC_E(4),
            0x59 => Self::LD_E_C(4),
            0xAC => Self::XOR_A_H(4),
            0xE0 => Self::LDH_a8_A(12, 1),
            0xF9 => Self::LD_SP_HL(8),
            0xC3 => Self::JP_a16(16, 2),
            0x0C => Self::INC_C(4),
            0x6D => Self::LD_L_L(4),
            0x25 => Self::DEC_H(4),
            0x67 => Self::LD_H_A(4),
            0xCB => Self::PREFIX(4),
            0x39 => Self::ADD_HL_SP(8),
            0xD0 => Self::RET_NC(20),
            0x62 => Self::LD_H_D(4),
            0x3C => Self::INC_A(4),
            0x70 => Self::LD_HL_B(8),
            0x03 => Self::INC_BC(8),
            0x73 => Self::LD_HL_E(8),
            0xC7 => Self::RST_00(16),
            0x51 => Self::LD_D_C(4),
            0x92 => Self::SUB_A_D(4),
            0xCA => Self::JP_Z_a16(16, 2),
            0xF0 => Self::LDH_A_a8(12, 1),
            0x95 => Self::SUB_A_L(4),
            0x08 => Self::LD_a16_SP(20, 2),
            0x52 => Self::LD_D_D(4),
            0x4B => Self::LD_C_E(4),
            0xA8 => Self::XOR_A_B(4),
            0x53 => Self::LD_D_E(4),
            0x88 => Self::ADC_A_B(4),
            0x28 => Self::JR_Z_e8(12, 1),
            0xDB => Self::ILLEGAL_DB(4),
            0x30 => Self::JR_NC_e8(12, 1),
            0x21 => Self::LD_HL_n16(12, 2),
            0x14 => Self::INC_D(4),
            0xB2 => Self::OR_A_D(4),
            0x7D => Self::LD_A_L(4),
            0x41 => Self::LD_B_C(4),
            0x7E => Self::LD_A_HL(8),
            0x89 => Self::ADC_A_C(4),
            0xFC => Self::ILLEGAL_FC(4),
            0x6F => Self::LD_L_A(4),
            0x6C => Self::LD_L_H(4),
            0x0E => Self::LD_C_n8(8, 1),
            0x77 => Self::LD_HL_A(8),
            0x3D => Self::DEC_A(4),
            0xDF => Self::RST_18(16),
            0xC2 => Self::JP_NZ_a16(16, 2),
            0x37 => Self::SCF(4),
            0xD7 => Self::RST_10(16),
            0x8A => Self::ADC_A_D(4),
            0x36 => Self::LD_HL_n8(12, 1),
            0x0D => Self::DEC_C(4),
            0xE9 => Self::JP_HL(4),
            0xD9 => Self::RETI(16),
            0xEB => Self::ILLEGAL_EB(4),
            0x86 => Self::ADD_A_HL(8),
            0xF4 => Self::ILLEGAL_F4(4),
            0x49 => Self::LD_C_C(4),
            0xE3 => Self::ILLEGAL_E3(4),
            0xDD => Self::ILLEGAL_DD(4),
            0x60 => Self::LD_H_B(4),
            0x7B => Self::LD_A_E(4),
            0x98 => Self::SBC_A_B(4),
            0x9A => Self::SBC_A_D(4),
            0x12 => Self::LD_DE_A(8),
            0x91 => Self::SUB_A_C(4),
            0x11 => Self::LD_DE_n16(12, 2),
            0xA5 => Self::AND_A_L(4),
            0xF8 => Self::LD_HL_SP_e8(12, 1),
            0x15 => Self::DEC_D(4),
            0xAF => Self::XOR_A_A(4),
            0xB8 => Self::CP_A_B(4),
            0xE2 => Self::LD_C_A(8),
            0x29 => Self::ADD_HL_HL(8),
            0x22 => Self::LD_HL_A(8),
            0x3A => Self::LD_A_HL(8),
            0x47 => Self::LD_B_A(4),
            0xFF => Self::RST_38(16),
            0x2A => Self::LD_A_HL(8),
            0x2C => Self::INC_L(4),
            0x9B => Self::SBC_A_E(4),
            0x35 => Self::DEC_HL(12),
            0xCE => Self::ADC_A_n8(8, 1),
            0x96 => Self::SUB_A_HL(8),
            0xC9 => Self::RET(16),
            0x46 => Self::LD_B_HL(8),
            0x2B => Self::DEC_HL(8),
            0xC4 => Self::CALL_NZ_a16(24, 2),
            0xD6 => Self::SUB_A_n8(8, 1),
            0xA6 => Self::AND_A_HL(8),
            0xDC => Self::CALL_C_a16(24, 2),
            0xEA => Self::LD_a16_A(16, 2),
            0x18 => Self::JR_e8(12, 1),
            0x97 => Self::SUB_A_A(4),
            0xA3 => Self::AND_A_E(4),
            0x81 => Self::ADD_A_C(4),
            0x4E => Self::LD_C_HL(8),
            0x1A => Self::LD_A_DE(8),
            0x58 => Self::LD_E_B(4),
            0x6B => Self::LD_L_E(4),
            0x72 => Self::LD_HL_D(8),
            0x27 => Self::DAA(4),
            0xF2 => Self::LD_A_C(8),
            0xBF => Self::CP_A_A(4),
            0x76 => Self::HALT(4),
            0x83 => Self::ADD_A_E(4),
            0xA0 => Self::AND_A_B(4),
            0xD1 => Self::POP_DE(12),
            0xF1 => Self::POP_AF(12),
            0x3B => Self::DEC_SP(8),
            0x4C => Self::LD_C_H(4),
            0x93 => Self::SUB_A_E(4),
            0x26 => Self::LD_H_n8(8, 1),
            0xFB => Self::EI(4),
            0xBC => Self::CP_A_H(4),
            0xB4 => Self::OR_A_H(4),
            0xBD => Self::CP_A_L(4),
            0x07 => Self::RLCA(4),
            0x00 => Self::NOP(4),
            0x0F => Self::RRCA(4),
            0xE7 => Self::RST_20(16),
            0x2D => Self::DEC_L(4),
            0x71 => Self::LD_HL_C(8),
            0xE8 => Self::ADD_SP_e8(16, 1),
            0x99 => Self::SBC_A_C(4),
            0x8C => Self::ADC_A_H(4),
            0x1F => Self::RRA(4),
            0x32 => Self::LD_HL_A(8),
            0xD8 => Self::RET_C(20),
            0xED => Self::ILLEGAL_ED(4),
            0x16 => Self::LD_D_n8(8, 1),
            0x10 => Self::STOP_n8(4, 1),
            0x5C => Self::LD_E_H(4),
            0x33 => Self::INC_SP(8),
            0x5F => Self::LD_E_A(4),
            0x64 => Self::LD_H_H(4),
            0xA2 => Self::AND_A_D(4),
            0xB9 => Self::CP_A_C(4),
            0xBA => Self::CP_A_D(4),
            0x23 => Self::INC_HL(8),
            0x63 => Self::LD_H_E(4),
            0xBE => Self::CP_A_HL(8),
            0xFD => Self::ILLEGAL_FD(4),
            0x8E => Self::ADC_A_HL(8),
            0x04 => Self::INC_B(4),
            0xAD => Self::XOR_A_L(4),
            0xEF => Self::RST_28(16),
            0xB7 => Self::OR_A_A(4),
            0x31 => Self::LD_SP_n16(12, 2),
            0xB0 => Self::OR_A_B(4),
            0x84 => Self::ADD_A_H(4),
            0xB3 => Self::OR_A_E(4),
            0x50 => Self::LD_D_B(4),
            0x7A => Self::LD_A_D(4),
            0x1C => Self::INC_E(4),
            0xE5 => Self::PUSH_HL(16),
            0x57 => Self::LD_D_A(4),
            0x66 => Self::LD_H_HL(8),
            0x1B => Self::DEC_DE(8),
            0xAA => Self::XOR_A_D(4),
            0x85 => Self::ADD_A_L(4),
            0x9E => Self::SBC_A_HL(8),
            0x94 => Self::SUB_A_H(4),
            0x13 => Self::INC_DE(8),
            0x80 => Self::ADD_A_B(4),
            0x68 => Self::LD_L_B(4),
            0x61 => Self::LD_H_C(4),
            0xA1 => Self::AND_A_C(4),
            0x5E => Self::LD_E_HL(8),
            0x44 => Self::LD_B_H(4),
            0x40 => Self::LD_B_B(4),
            0xCD => Self::CALL_a16(24, 2),
            0xF7 => Self::RST_30(16),
            0x65 => Self::LD_H_L(4),
            0x02 => Self::LD_BC_A(8),
            0xD2 => Self::JP_NC_a16(16, 2),
            0x54 => Self::LD_D_H(4),
            0xDA => Self::JP_C_a16(16, 2),
            0x9C => Self::SBC_A_H(4),
            0xA4 => Self::AND_A_H(4),
            0xC5 => Self::PUSH_BC(16),
            0x82 => Self::ADD_A_D(4),
            0xF3 => Self::DI(4),
            0xCF => Self::RST_08(16),
            0x4A => Self::LD_C_D(4),
            0xDE => Self::SBC_A_n8(8, 1),
            0x06 => Self::LD_B_n8(8, 1),
            0xA7 => Self::AND_A_A(4),
            0x8B => Self::ADC_A_E(4),
            0xD4 => Self::CALL_NC_a16(24, 2),
            0x20 => Self::JR_NZ_e8(12, 1),
            0x0B => Self::DEC_BC(8),
            0x9D => Self::SBC_A_L(4),
            0xC6 => Self::ADD_A_n8(8, 1),
            0x42 => Self::LD_B_D(4),
            0xD5 => Self::PUSH_DE(16),
            0xEE => Self::XOR_A_n8(8, 1),
            0x45 => Self::LD_B_L(4),
            0x7C => Self::LD_A_H(4),
            0x2F => Self::CPL(4),
            0x1E => Self::LD_E_n8(8, 1),
            0x24 => Self::INC_H(4),
            0xE6 => Self::AND_A_n8(8, 1),
            0x56 => Self::LD_D_HL(8),
            0x8F => Self::ADC_A_A(4),
            0xFE => Self::CP_A_n8(8, 1),
            0xF5 => Self::PUSH_AF(16),
            0x0A => Self::LD_A_BC(8),
            0x7F => Self::LD_A_A(4),
            0x74 => Self::LD_HL_H(8),
            0x4D => Self::LD_C_L(4),
            0xB1 => Self::OR_A_C(4),
            0x4F => Self::LD_C_A(4),
            0xE1 => Self::POP_HL(12),
            0xE4 => Self::ILLEGAL_E4(4),
            0x6E => Self::LD_L_HL(8),
            0x34 => Self::INC_HL(12),
            0xB5 => Self::OR_A_L(4),
            0x5D => Self::LD_E_L(4),
            0x5B => Self::LD_E_E(4),
            0xFA => Self::LD_A_a16(16, 2),
            0x5A => Self::LD_E_D(4),
            0xAE => Self::XOR_A_HL(8),
            0x09 => Self::ADD_HL_BC(8),
            0x19 => Self::ADD_HL_DE(8),
            0x90 => Self::SUB_A_B(4),
            0xC0 => Self::RET_NZ(20),
            0xF6 => Self::OR_A_n8(8, 1),
            0xC1 => Self::POP_BC(12),
            0xA9 => Self::XOR_A_C(4),
            0x2E => Self::LD_L_n8(8, 1),
            0xCC => Self::CALL_Z_a16(24, 2),
            0xAB => Self::XOR_A_E(4),
            0x69 => Self::LD_L_C(4),
            0x17 => Self::RLA(4),
            0x79 => Self::LD_A_C(4),
            0x9F => Self::SBC_A_A(4),
            0x3F => Self::CCF(4),
            0x6A => Self::LD_L_D(4),
            0x48 => Self::LD_C_B(4),
            0xD3 => Self::ILLEGAL_D3(4),
            0x01 => Self::LD_BC_n16(12, 2),
            0x87 => Self::ADD_A_A(4),
            0x75 => Self::LD_HL_L(8),
            0x43 => Self::LD_B_E(4),
            0x38 => Self::JR_C_e8(12, 1),
            0x05 => Self::DEC_B(4),
            0xBB => Self::CP_A_E(4),
            0x78 => Self::LD_A_B(4),
            _ => Self::NYI(value),
        }
    }
}
